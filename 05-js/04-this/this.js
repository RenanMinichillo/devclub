/*  
    THIS

    "This" em ingl√™s significa ‚Üí este, esta, isto ...

    No JavaScript, o `this` faz refer√™ncia a diferentes contextos dependendo de onde √© usado:

    - **No Node.js** ‚Üí module.exports
    - **No navegador (Web)** ‚Üí window

    üìå **Escopo do this**:
    
        - **Global** ‚Üí Quando usado no contexto global, `this` faz refer√™ncia ao objeto global,
          que √© o `window` no navegador ou `global` no Node.js.

        - **Local** ‚Üí O `this` dentro de uma fun√ß√£o depende de como a fun√ß√£o √© chamada!
*/

// Exemplo de uso do this dentro de um objeto
const person = {
    name: 'Renan',
    age: 28,
    talk: function () {
        console.log(this.name) // Faz refer√™ncia √† propriedade name do pr√≥prio objeto
    }
}

person.talk() // Sa√≠da: "Renan"

/*  
    üìå Exemplo do module.exports no Node.js

    No Node.js, ao inv√©s de usar:
    
        module.exports = sum
        module.exports = { sum, multi }

    Podemos utilizar `this` dentro de um m√≥dulo para exportar fun√ß√µes:
*/

this.sum = (a, b) => a + b
this.multi = (a, b) => a * b

// No Node.js, `this` em um m√≥dulo se refere ao `module.exports`

/*
    üìå Exemplo de escopo local

    Dentro de uma fun√ß√£o dentro de um objeto, o `this` se refere ao pr√≥prio objeto.
*/

const myObject = {
    name: 'Helio',
    age: 32,
    talk: function () {
        console.log(`Meu nome √© ${this.name} e minha idade √© ${this.age}`)
    }
}

myObject.talk() // Sa√≠da: "Meu nome √© Helio e minha idade √© 32"

